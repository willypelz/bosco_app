import { legacyPlugin as api } from '@snyk/cli-interface';
export declare const __tests: {
    buildArgs: typeof buildArgs;
};
export interface PythonInspectOptions {
    command?: string;
    allowMissing?: boolean;
    args?: string[];
}
declare type Options = api.SingleSubprojectInspectOptions & PythonInspectOptions;
export declare function inspect(root: string, targetFile: string, options?: Options): Promise<api.SinglePackageResult>;
interface UpgradeRemediation {
    upgradeTo: string;
}
interface DependencyUpdates {
    [from: string]: UpgradeRemediation;
}
interface ManifestFiles {
    [name: string]: string;
}
export interface DepTreeDep {
    name?: string;
    version?: string;
    dependencies?: {
        [depName: string]: DepTreeDep;
    };
    labels?: {
        [key: string]: string;
    };
}
export declare function applyRemediationToManifests(root: string, manifests: ManifestFiles, upgrades: DependencyUpdates, options: Options): Promise<ManifestFiles>;
declare function buildArgs(targetFile: string, allowMissing: boolean, tempDirPath: string, includeDevDeps: boolean, extraArgs?: string[]): string[];
export {};
